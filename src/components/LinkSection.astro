<div class="link-section">
  <form class="shorten-form" id="shorten-form">
    <div class="input-wrap">
      <label for="url-input" class="sr-only">Shorten a link here...</label>
      <input type="text" id="url-input" placeholder="Shorten a link here..." />
      <p class="error-text" id="error-text" aria-live="polite"></p>
    </div>
    <button type="submit" class="shorten-btn">Shorten It!</button>
  </form>

  <div class="shortened-links" id="shortened-links"></div>
</div>

<style>
  .link-section {
    max-width: 70.9375rem;
    margin: 0 auto;
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
    width: 100%;
    margin-top: -85px;
  }

  .shorten-form {
    background-image: url("/src/assets/bg-shorten-mobile.svg");
    background-color: var(--clr-dark-violet);
    background-repeat: no-repeat;
    background-position: top right;
    background-size: cover;
    border-radius: 10px;
    display: flex;
    align-items: center;
    flex-direction: column;
    gap: 1rem;
    padding: 1.5rem;
  }

  @media screen and (min-width: 48rem) {
    .shorten-form {
      background-image: url("/src/assets/bg-shorten-desktop.svg");
      flex-direction: row;
      align-items: baseline;
      justify-content: space-between;
      padding: 3.25rem 4.0625rem;
      gap: 1.5rem;
    }
  }

  .shorten-form input {
    border-radius: 5px;
    padding: 0.2em 2em;
    font-weight: 500;
    font-size: 1.25rem;
    line-height: 180%;
    letter-spacing: 0.15px;
    color: var(--clr-very-dark-blue);
    width: 100%;
    max-width: 48.0625rem;
    border: 3px solid transparent;

    &:focus-visible {
      outline: 3px solid var(--clr-cyan);
      outline-offset: 3px;
    }
  }

  .shorten-form input::placeholder {
    mix-blend-mode: normal;
    opacity: 0.5;
  }

  .error-placeholder::placeholder {
    color: var(--clr-red);
    opacity: 1;
  }

  @media screen and (min-width: 48rem) {
    .shorten-form input {
      padding: 0.6em 2em;
      border-radius: 10px;
    }
  }

  .input-wrap {
    position: relative;
    width: 100%;
  }

  @media screen and (min-width: 48rem) {
    .input-wrap {
      padding-bottom: 0;
    }
  }

  .error-text {
    font-style: italic;
    font-weight: 500;
    font-size: 1rem;
    letter-spacing: 0.109091px;
    color: var(--clr-red);
    margin-top: 4px;
    position: absolute;
    display: none;
  }

  @media screen and (min-width: 48rem) {
    .error-text {
      margin-top: 8px;
    }
  }

  .shorten-btn {
    background-color: var(--clr-cyan);
    color: var(--clr-white);
    border-radius: 5px;
    padding: 0.5em;
    font-size: 1.25rem;
    font-weight: 700;
    cursor: pointer;
    transition: background-color 0.3s;
    width: 100%;
    border: transparent;

    &:hover {
      background-color: var(--clr-light-cyan);
    }

    &:focus-visible {
      outline: 3px solid var(--clr-cyan);
      outline-offset: 3px;
    }
  }

  @media screen and (min-width: 48rem) {
    .shorten-btn {
      padding: 0.9em;
      border-radius: 10px;
      width: 11.75rem;
    }
  }

  .shortened-links {
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
  }

  @media screen and (min-width: 48rem) {
    .shortened-links {
      gap: 1rem;
    }
  }

  :global(.shortened-link) {
    display: flex;
    flex-direction: column;
    background: var(--clr-white);
    border-radius: 5px;
    padding: 1rem;
  }

  @media screen and (min-width: 964px) {
    :global(.shortened-link) {
      flex-direction: row;
      flex-wrap: wrap;
      justify-content: space-between;
      padding: 1.125rem 2rem;
    }
  }

  :global(.link-long),
  :global(.link-short) {
    font-weight: 500;
    font-size: 1rem;
    line-height: 225%;
    letter-spacing: 0.14px;
    word-break: break-all;
  }

  :global(.link-long) {
    color: var(--clr-very-dark-blue);
  }

  @media screen and (min-width: 48rem) {
    :global(.link-long),
    :global(.link-short) {
      font-size: 1.25rem;
      line-height: 180%;
    }
  }

  :global(.link-short) {
    color: var(--clr-cyan);
    text-decoration: none;

    &:focus-visible {
      outline: 3px solid var(--clr-cyan);
      outline-offset: 3px;
    }
  }

  :global(.copy-btn) {
    background-color: var(--clr-cyan);
    color: var(--clr-white);
    border-radius: 5px;
    padding: 0.5625rem;
    font-size: 1rem;
    font-weight: 700;
    cursor: pointer;
    transition: background-color 0.3s;
    width: 100%;
    border: transparent;

    &:hover {
      background-color: var(--clr-light-cyan);
    }

    &:focus-visible {
      outline: 3px solid var(--clr-cyan);
      outline-offset: 3px;
    }
  }

  @media screen and (min-width: 964px) {
    :global(.copy-btn) {
      width: 6.4375rem;
    }
  }

  :global(.link-btn-wrap) {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  :global(.link-btn-wrap)::before {
    content: "";
    width: 100%;
    height: 1px;
    background: var(--clr-grayish-violet);
    mix-blend-mode: normal;
    opacity: 0.25;
    margin-top: 0.375rem;
  }

  @media screen and (min-width: 964px) {
    :global(.link-btn-wrap)::before {
      display: none;
      align-items: center;
    }
  }

  @media screen and (min-width: 964px) {
    :global(.link-btn-wrap) {
      flex-direction: row;
      gap: 1.5rem;
    }
  }

  .sr-only {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border-width: 0;
  }
</style>

<script is:inline>
  const form = document.getElementById("shorten-form");
  const input = document.getElementById("url-input");
  const linksContainer = document.getElementById("shortened-links");
  const errorText = document.getElementById("error-text");
  const inputWrap = document.querySelector(".input-wrap");

  function saveLinks(links) {
    sessionStorage.setItem("shortenedLinks", JSON.stringify(links));
  }

  function getSavedLinks() {
    return JSON.parse(sessionStorage.getItem("shortenedLinks")) || [];
  }

  function renderLinks() {
    linksContainer.innerHTML = "";
    const savedLinks = getSavedLinks();

    savedLinks.forEach(({ original, short }) => {
      addLinkElement(original, short);
    });
  }

  function addLinkElement(original, short) {
    const shortLinkEl = document.createElement("div");
    shortLinkEl.classList.add("shortened-link");
    shortLinkEl.innerHTML = `
      <p class="link-long">${original}</p>
      <div class="link-btn-wrap">
        <a class="link-short" href="${short}" target="_blank">${short}</a>
        <button class="copy-btn">Copy</button>
      </div>
    `;

    linksContainer.appendChild(shortLinkEl);

    const copyBtn = shortLinkEl.querySelector(".copy-btn");
    copyBtn.addEventListener("click", function () {
      navigator.clipboard.writeText(short).then(() => {
        copyBtn.textContent = "Copied!";
        copyBtn.style.backgroundColor = "var(--clr-dark-violet)";
        setTimeout(() => {
          copyBtn.textContent = "Copy";
          copyBtn.style.backgroundColor = "var(--clr-cyan)";
        }, 2000);
      });
    });
  }

  function showError(message) {
    if (errorText) {
      errorText.textContent = message;
      errorText.style.display = "block";
    }
    if (inputWrap) inputWrap.style.paddingBottom = "14px";
    if (input) {
      input.style.border = "3px solid var(--clr-red)";
      input.classList.add("error-placeholder");
    }
  }

  function clearError() {
    if (errorText) errorText.style.display = "none";
    if (inputWrap) inputWrap.style.paddingBottom = "0";
    if (input) {
      input.style.border = "3px solid transparent";
      input.classList.remove("error-placeholder");
    }
  }

  function isValidUrl(url) {
    try {
      new URL(url);
      return true;
    } catch (_) {
      return false;
    }
  }

  form?.addEventListener("submit", async function (event) {
    event.preventDefault();
    const url = input?.value.trim() || "";

    if (!url) {
      showError("Please enter a URL.");
      return;
    }

    if (!isValidUrl(url)) {
      showError("Please enter a valid URL.");
      return;
    }

    try {
      const res = await fetch("/api/shorten", {
        method: "POST",
        body: new URLSearchParams({ url }),
      });

      const data = await res.json();

      if (data.result_url) {
        addLinkElement(url, data.result_url);

        const savedLinks = getSavedLinks();
        savedLinks.push({ original: url, short: data.result_url });
        saveLinks(savedLinks);

        if (input) input.value = "";
        clearError();
      }
    } catch (error) {
      console.error("Failed to shorten URL:", error);
    }
  });

  input?.addEventListener("focus", clearError);
  document.addEventListener("DOMContentLoaded", renderLinks);
</script>
